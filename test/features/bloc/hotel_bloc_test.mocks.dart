// Mocks generated by Mockito 5.4.5 from annotations
// in hotel_booking/test/features/bloc/hotel_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i15;
import 'package:hotel_booking/core/utils/execptions.dart' as _i10;
import 'package:hotel_booking/features/hotel/domain/entities/favorite_entity.dart'
    as _i12;
import 'package:hotel_booking/features/hotel/domain/entities/hotels_entity.dart'
    as _i11;
import 'package:hotel_booking/features/hotel/domain/repositories/hotel_repsitory.dart'
    as _i2;
import 'package:hotel_booking/features/hotel/domain/use_case/add_to_favorite.dart'
    as _i7;
import 'package:hotel_booking/features/hotel/domain/use_case/delete_favorite.dart'
    as _i6;
import 'package:hotel_booking/features/hotel/domain/use_case/get_favorites.dart'
    as _i5;
import 'package:hotel_booking/features/hotel/domain/use_case/get_hotels.dart'
    as _i4;
import 'package:hotel_booking/features/hotel/presentation/bloc/hotel_bloc.dart'
    as _i13;
import 'package:hotel_booking/features/hotel/presentation/bloc/hotel_event.dart'
    as _i14;
import 'package:hotel_booking/features/hotel/presentation/bloc/hotel_state.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHotelRepository_0 extends _i1.SmartFake
    implements _i2.HotelRepository {
  _FakeHotelRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetHotels_2 extends _i1.SmartFake implements _i4.GetHotels {
  _FakeGetHotels_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetFavorites_3 extends _i1.SmartFake implements _i5.GetFavorites {
  _FakeGetFavorites_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteFavorite_4 extends _i1.SmartFake
    implements _i6.DeleteFavorite {
  _FakeDeleteFavorite_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddToFavorite_5 extends _i1.SmartFake implements _i7.AddToFavorite {
  _FakeAddToFavorite_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHotelState_6 extends _i1.SmartFake implements _i8.HotelState {
  _FakeHotelState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetHotels].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetHotels extends _i1.Mock implements _i4.GetHotels {
  MockGetHotels() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HotelRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeHotelRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.HotelRepository);

  @override
  _i9.Future<_i3.Either<_i10.Failure, _i11.HotelsEntity>> call(
          Object? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i9.Future<_i3.Either<_i10.Failure, _i11.HotelsEntity>>.value(
                _FakeEither_1<_i10.Failure, _i11.HotelsEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, _i11.HotelsEntity>>);
}

/// A class which mocks [AddToFavorite].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddToFavorite extends _i1.Mock implements _i7.AddToFavorite {
  MockAddToFavorite() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HotelRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeHotelRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.HotelRepository);

  @override
  _i9.Future<_i3.Either<_i10.Failure, bool>> call(
          _i12.FavoriteEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i9.Future<_i3.Either<_i10.Failure, bool>>.value(
            _FakeEither_1<_i10.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, bool>>);
}

/// A class which mocks [GetFavorites].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFavorites extends _i1.Mock implements _i5.GetFavorites {
  MockGetFavorites() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HotelRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeHotelRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.HotelRepository);

  @override
  _i9.Future<_i3.Either<_i10.Failure, List<_i12.FavoriteEntity>>> call(
          Object? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i9
            .Future<_i3.Either<_i10.Failure, List<_i12.FavoriteEntity>>>.value(
            _FakeEither_1<_i10.Failure, List<_i12.FavoriteEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, List<_i12.FavoriteEntity>>>);
}

/// A class which mocks [DeleteFavorite].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteFavorite extends _i1.Mock implements _i6.DeleteFavorite {
  MockDeleteFavorite() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HotelRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeHotelRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.HotelRepository);

  @override
  _i9.Future<_i3.Either<_i10.Failure, bool>> call(
          _i12.FavoriteEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i9.Future<_i3.Either<_i10.Failure, bool>>.value(
            _FakeEither_1<_i10.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, bool>>);
}

/// A class which mocks [HotelBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHotelBloc extends _i1.Mock implements _i13.HotelBloc {
  MockHotelBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetHotels get getHotels => (super.noSuchMethod(
        Invocation.getter(#getHotels),
        returnValue: _FakeGetHotels_2(
          this,
          Invocation.getter(#getHotels),
        ),
      ) as _i4.GetHotels);

  @override
  _i5.GetFavorites get getFavorites => (super.noSuchMethod(
        Invocation.getter(#getFavorites),
        returnValue: _FakeGetFavorites_3(
          this,
          Invocation.getter(#getFavorites),
        ),
      ) as _i5.GetFavorites);

  @override
  _i6.DeleteFavorite get deleteFavorite => (super.noSuchMethod(
        Invocation.getter(#deleteFavorite),
        returnValue: _FakeDeleteFavorite_4(
          this,
          Invocation.getter(#deleteFavorite),
        ),
      ) as _i6.DeleteFavorite);

  @override
  _i7.AddToFavorite get addToFavorite => (super.noSuchMethod(
        Invocation.getter(#addToFavorite),
        returnValue: _FakeAddToFavorite_5(
          this,
          Invocation.getter(#addToFavorite),
        ),
      ) as _i7.AddToFavorite);

  @override
  _i8.HotelState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeHotelState_6(
          this,
          Invocation.getter(#state),
        ),
      ) as _i8.HotelState);

  @override
  _i9.Stream<_i8.HotelState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i8.HotelState>.empty(),
      ) as _i9.Stream<_i8.HotelState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i14.HotelEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i14.HotelEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i8.HotelState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i14.HotelEvent>(
    _i15.EventHandler<E, _i8.HotelState>? handler, {
    _i15.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i15.Transition<_i14.HotelEvent, _i8.HotelState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void onChange(_i15.Change<_i8.HotelState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
